{"version":3,"sources":["components/Title.js","components/Meme.js","components/Search.js","services/memes.js","components/MemeContainer.js","components/Root.js","serviceWorker.js","index.js"],"names":["Title","_ref","children","react_default","a","createElement","className","Meme","name","imageUrl","ranking","totalVotesScore","src","alt","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","search","target","value","state","handleSearch","onChange","type","onClick","React","Component","baseUrl","apiKey","getMemesByPopular","_getMemesByPopular","apply","arguments","_callee","response","responseJson","regenerator_default","wrap","_context","prev","next","fetch","concat","sent","json","abrupt","stop","getMemesBySearch","_x","_getMemesBySearch","_callee2","q","_context2","MemeContainer","asyncToGenerator","mark","memes","result","isFetch","_this$state","Fragment","components_Search","length","map","meme","components_Meme","displayName","key","generatorID","Root","components_Title","components_MemeContainer","Boolean","window","location","hostname","match","ReactDOM","render","components_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bddcb83a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Title = ({ children }) => <h1 className=\"title\">{children}</h1>\n\nTitle.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default Title\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Meme = ({\n  name,\n  imageUrl,\n  ranking,\n  totalVotesScore\n}) => (\n  <div className=\"single-meme\">\n    <h2>{name}</h2>\n    <img src={imageUrl} alt={name} />\n    <p>ranking: {ranking}</p>\n    <p>Total score: {totalVotesScore}</p>\n  </div>\n)\n\nMeme.propTypes = {\n  name: PropTypes.string.isRequired,\n  imageUrl: PropTypes.string.isRequired,\n  ranking: PropTypes.number.isRequired,\n  totalVotesScore: PropTypes.number.isRequired,\n}\n\nexport default Meme\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass Search extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = { search: '' }\n  }\n\n  handleChange = (e) => {\n    this.setState({ search: e.target.value })\n  }\n\n  render () {\n    const { handleSearch } = this.props\n    const { search } = this.state\n\n    return (\n      <div className=\"search-container\">\n        <input\n          value={search}\n          onChange={this.handleChange}\n          className=\"search-input\"\n          type=\"text\"\n        />\n        <button className=\"search-btn\" onClick={() => handleSearch(search)}>Search</button>\n      </div>\n    )\n  }\n}\n\nSearch.propTypes = {\n  handleSearch: PropTypes.func.isRequired\n}\n\nexport default Search\n","const baseUrl = 'http://version1.api.memegenerator.net'\nconst apiKey = '010695ac-ac35-458e-a175-bf184883598a'\n\nexport async function getMemesByPopular () {\n  const pageIndex = 0\n  const response = await fetch(`${baseUrl}/Generators_Select_ByPopular?pageIndex=${pageIndex}&pageSize=12&&apiKey=${apiKey}`)\n  const responseJson = await response.json()\n  return responseJson\n}\n\nexport async function getMemesBySearch (q) {\n  const response = await fetch(`${baseUrl}/Generators_Search?q=${q}&pageIndex=0&pageSize=12&apiKey=${apiKey}`)\n  const responseJson = await response.json()\n  return responseJson\n}\n\nexport default {\n  getMemesByPopular,\n  getMemesBySearch\n}\n","import React from 'react'\nimport Meme from './Meme'\nimport Search from './Search'\nimport { getMemesByPopular, getMemesBySearch } from '../services/memes'\n\nclass MemeContainer extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      memes: [],\n      isFetch: true,\n    }\n  }\n\n  async componentDidMount () {\n    const responseJson = await getMemesByPopular()\n    this.setState({ memes: responseJson.result, isFetch: false })\n  }\n\n  handleSearch = async (search) => {\n    const responseJson = await getMemesBySearch(search)\n    this.setState({ memes: responseJson.result })\n  }\n\n  render () {\n    const { isFetch, memes } = this.state\n\n    return (\n      <>\n        <Search handleSearch={this.handleSearch} />\n\n        {\n          isFetch && 'Loading...'\n        }\n\n        {\n          (!isFetch && !memes.length) && 'No memes founded u.u try another search'\n        }\n\n        <section className=\"memes-container\">\n          {\n            memes.map((meme) => <Meme\n              imageUrl={meme.imageUrl}\n              name={meme.displayName}\n              key={meme.generatorID}\n              ranking={meme.ranking}\n              totalVotesScore={meme.totalVotesScore}\n            />)\n          }\n        </section>\n      </>\n    )\n  }\n}\n\nexport default MemeContainer\n","import React from 'react'\nimport Title from './Title'\nimport MemeContainer from './MemeContainer'\n\nconst Root = () => (\n  <>\n    <Title>Meme App</Title>\n    <MemeContainer />\n  </>\n)\n\nexport default Root\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/Root';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}